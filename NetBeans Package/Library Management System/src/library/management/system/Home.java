package library.management.system;


import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import javax.swing.BorderFactory;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import static java.time.temporal.ChronoUnit.DAYS;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Alkesh
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     * @param authid
     */
    String authid;
    ArrayList<Integer> row = new ArrayList<Integer>();
    public Home() {
        System.out.println("Checking auth: " + authid);
        initComponents();
        homePanel.setVisible(true);
        issuePanel.setVisible(false);
        returnPanel.setVisible(false);
        home.setBorder(BorderFactory.createLineBorder(Color.black));
        genhomeTable();
        //JOptionPane.showMessageDialog(null, "Welcome Nigga "+authid);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        home = new javax.swing.JLabel();
        issue = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        homePanel = new javax.swing.JPanel();
        issuedbooksLabel = new javax.swing.JLabel();
        totalfineLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        issuedTable = new javax.swing.JTable();
        issuePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        booksTable = new javax.swing.JTable();
        returnPanel = new javax.swing.JPanel();
        issuedbooksLabel1 = new javax.swing.JLabel();
        rembooksLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        returnTable = new javax.swing.JTable();
        giveback = new javax.swing.JLabel();
        signoutButton = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(1, 1, 1));
        setPreferredSize(new java.awt.Dimension(905, 740));
        setResizable(false);
        setSize(new java.awt.Dimension(905, 740));

        home.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        home.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        home.setText("Home");
        home.setMaximumSize(null);
        home.setMinimumSize(null);
        home.setPreferredSize(null);
        home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                homeMouseExited(evt);
            }
        });

        issue.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        issue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        issue.setText("Issue");
        issue.setMaximumSize(null);
        issue.setMinimumSize(null);
        issue.setPreferredSize(null);
        issue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                issueMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                issueMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                issueMouseExited(evt);
            }
        });

        jLayeredPane1.setPreferredSize(new java.awt.Dimension(900, 613));
        jLayeredPane1.setLayout(new javax.swing.OverlayLayout(jLayeredPane1));

        issuedbooksLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        issuedbooksLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        issuedbooksLabel.setText("Issued Books");

        totalfineLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        totalfineLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalfineLabel.setText("Total Fine : ");

        jScrollPane2.setBorder(null);
        jScrollPane2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        issuedTable.setAutoCreateRowSorter(true);
        issuedTable.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        issuedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Author", "Publication", "Issue Date", "Due Date", "Fine"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(issuedTable);

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(issuedbooksLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(totalfineLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePanelLayout.createSequentialGroup()
                .addComponent(issuedbooksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(totalfineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLayeredPane1.add(homePanel);

        jScrollPane1.setBorder(null);

        booksTable.setAutoCreateRowSorter(true);
        booksTable.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        booksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Author", "Publication", "Available Quantity", "Issue"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if(row.contains(rowIndex))
                return false;
                else
                return canEdit [columnIndex];
            }
        });
        booksTable.setRowSorter(null);
        jScrollPane1.setViewportView(booksTable);

        javax.swing.GroupLayout issuePanelLayout = new javax.swing.GroupLayout(issuePanel);
        issuePanel.setLayout(issuePanelLayout);
        issuePanelLayout.setHorizontalGroup(
            issuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        issuePanelLayout.setVerticalGroup(
            issuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLayeredPane1.add(issuePanel);

        issuedbooksLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        issuedbooksLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        issuedbooksLabel1.setText("Issued Books");

        rembooksLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        rembooksLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rembooksLabel.setText("Outstanding Books :");

        jScrollPane3.setBorder(null);
        jScrollPane3.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        returnTable.setAutoCreateRowSorter(true);
        returnTable.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        returnTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Author", "Publication", "Issue Date", "Due Date", "Fine", "Return"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(returnTable);

        javax.swing.GroupLayout returnPanelLayout = new javax.swing.GroupLayout(returnPanel);
        returnPanel.setLayout(returnPanelLayout);
        returnPanelLayout.setHorizontalGroup(
            returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(issuedbooksLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rembooksLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        returnPanelLayout.setVerticalGroup(
            returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, returnPanelLayout.createSequentialGroup()
                .addComponent(issuedbooksLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(rembooksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLayeredPane1.add(returnPanel);

        giveback.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        giveback.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        giveback.setText("Return");
        giveback.setMaximumSize(null);
        giveback.setMinimumSize(null);
        giveback.setPreferredSize(new java.awt.Dimension(300, 80));
        giveback.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                givebackMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                givebackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                givebackMouseExited(evt);
            }
        });

        signoutButton.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        signoutButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        signoutButton.setText("Sign Out");
        signoutButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        signoutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        signoutButton.setMaximumSize(null);
        signoutButton.setMinimumSize(null);
        signoutButton.setPreferredSize(null);
        signoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                signoutButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                signoutButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                signoutButtonMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(issue, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(giveback, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(379, 379, 379)
                .addComponent(signoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(issue, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(giveback, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(signoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public class MyTableCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                   boolean hasFocus, int rows, int column){
            if(row.contains(rows))
            {
                setBackground(new Color(250,50,50));
            }
            else
                setBackground(null);
            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, rows, column);
        }
    }
    
    
    private void genhomeTable(){
        try
        {
            //Class.forName("com.mysql.jdbc.Driver").newInstance();
            Connection conn;
            conn = DriverManager.getConnection("jdbc:mysql://localhost/library","nigger", "nigger");
            System.out.println("Database is connected !");                                   
           
            DefaultTableModel model = (DefaultTableModel) issuedTable.getModel();
            model.setRowCount(0);
            
            // the mysql insert statement
            String query = "select `bookid`,`issuedate` from `issue` where collegeid='"+authid+"'";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(query);
            System.out.println("Home table executed for "+authid);
            int totalfine = 0;
            while (rs.next())
            {
                String bookid = rs.getString("bookid");
                Statement st1 = conn.createStatement();
                ResultSet nrs = st1.executeQuery("select * from `books` where `bookid`='"+bookid+"'");
                nrs.next();
                String bookname = nrs.getString("bookname");
                String bookauthor = nrs.getString("bookauthor");
                String bookpub = nrs.getString("bookpublication");                
                LocalDate issuedate = rs.getDate("issuedate").toLocalDate();
                LocalDate duedate = issuedate.plusDays(15);
                long fine = DAYS.between(duedate, LocalDate.now());                
                if(fine > 0)
                    fine *= 0.5;
                else
                    fine = 0;
                model.addRow(new Object[]{bookid, bookname, bookauthor, bookpub, issuedate, duedate, (int)fine}); 
                totalfine += fine;
            }
            totalfineLabel.setText("Total Fine : ₹"+totalfine);
        }
        catch (SQLException ex) 
        {
            // handle any errors
            System.out.println("Home table errors "+authid);
            System.out.println("\tSQLException: " + ex.getMessage());
            System.out.println("\tSQLState: " + ex.getSQLState());
            System.out.println("\tVendorError: " + ex.getErrorCode());
        }
    }
    
    Action delete = new AbstractAction()
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    JTable table = (JTable)e.getSource();
                    int modelRow = Integer.valueOf(e.getActionCommand());
                    String ibookid = (String) booksTable.getModel().getValueAt(modelRow, 0);
                    LocalDate issuedate = LocalDate.now();
                    try{
                        Connection conn;
                        conn = DriverManager.getConnection("jdbc:mysql://localhost/library","nigger", "nigger");
                        ResultSet crs = conn.createStatement().executeQuery("select count(*) as `count` from `issue` where collegeid='"+authid+"'");
                        crs.next();
                        int count = crs.getInt("count");
                        if (count < 10){                            
                            Statement st2 = conn.createStatement();
                            st2.executeUpdate("INSERT INTO `issue` (`collegeid`, `bookid`, `issuedate`) VALUES ('"+authid+"', '"+ibookid+"', '"+java.sql.Date.valueOf(issuedate)+"')");
                            st2.executeUpdate("UPDATE `books` SET `quantity` = `quantity` - 1 WHERE `bookid` = '"+ibookid+"'");
                            //((DefaultTableModel)table.getModel()).removeRow(modelRow);
                            genissueTable();
                        }
                        else
                            JOptionPane.showMessageDialog(null, "Max Book Issue limit reached! Return one or more books to issue");
                    }
                    catch(SQLException ex)
                    {
                        System.out.println("Issuing a book");
                        System.out.println("\tSQLException: " + ex.getMessage());
                        System.out.println("\tSQLState: " + ex.getSQLState());
                        System.out.println("\tVendorError: " + ex.getErrorCode());
                    }                    
                }
            };
    
    private void genissueTable(){
        try
        {
            //Class.forName("com.mysql.jdbc.Driver").newInstance();
            Connection conn;
            conn = DriverManager.getConnection("jdbc:mysql://localhost/library","nigger", "nigger");
            System.out.println("Database is connected !");                                   
           
            DefaultTableModel model = (DefaultTableModel) booksTable.getModel();            
            model.setRowCount(0);
            
            // the mysql insert statement
            String query = "select * from `books`";
            Statement st3 = conn.createStatement();
            ResultSet rs = st3.executeQuery(query);
            System.out.println("Issue table executed for "+authid);
            int rc=0;
            row.clear();
            while (rs.next())
            {
                String bookid = rs.getString("bookid");                
                ResultSet krs = conn.createStatement().executeQuery("SELECT COUNT(*) as `count` from `issue` where `collegeid`='"+authid+"' and `bookid`='"+bookid+"'");
                krs.next();
                int check1 = krs.getInt("count");
                ResultSet resset = conn.createStatement().executeQuery("SELECT count(*) as `count` from `books` where `bookid`='"+bookid+"' and `quantity`=0");
                resset.next();
                int check2 = resset.getInt("count");                
                String bookname = rs.getString("bookname");
                String bookauthor = rs.getString("bookauthor");
                String bookpub = rs.getString("bookpublication");
                String quantity = rs.getString("quantity");
                if(check1==1 || check2==1)
                {
                    row.add(rc);
                    model.addRow(new Object[]{bookid, bookname, bookauthor, bookpub, quantity, "Unavailable"});
                }
                else
                    model.addRow(new Object[]{bookid, bookname, bookauthor, bookpub, quantity, "Issue"});
                rc++;
            }            
            new ButtonColumn(booksTable, delete, 5);
            booksTable.setDefaultRenderer(Object.class,new MyTableCellRenderer());            
        }
        catch (SQLException ex) 
        {
            // handle any errors
            System.out.println("Issue table gen error");
            System.out.println("\tSQLException: " + ex.getMessage());
            System.out.println("\tSQLState: " + ex.getSQLState());
            System.out.println("\tVendorError: " + ex.getErrorCode());
        }
    }
    
    Action returnbook = new AbstractAction()
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    JTable table = (JTable)e.getSource();
                    int modelRow = Integer.valueOf( e.getActionCommand() );
                    String ibookid = (String) returnTable.getModel().getValueAt(modelRow, 0);
                    LocalDate issuedate = (LocalDate) returnTable.getModel().getValueAt(modelRow, 4);
                    try{
                        Connection conn;
                        conn = DriverManager.getConnection("jdbc:mysql://localhost/library","nigger", "nigger");
                        Statement st5 = conn.createStatement();
                        st5.executeUpdate("DELETE FROM `issue` WHERE `collegeid`='"+authid+"' AND `bookid`='"+ibookid+"' AND `issuedate`='"+java.sql.Date.valueOf(issuedate)+"'");
                        st5.executeUpdate("UPDATE `books` SET `quantity` = `quantity` + 1 WHERE `bookid` = '"+ibookid+"'");
                        //((DefaultTableModel)table.getModel()).removeRow(modelRow);
                        genreturnTable();
                    }
                    catch(SQLException ex)
                    {
                        System.out.println("Returning a book");
                        System.out.println("\tSQLException: " + ex.getMessage());
                        System.out.println("\tSQLState: " + ex.getSQLState());
                        System.out.println("\tVendorError: " + ex.getErrorCode());
                    }                    
                }
            };
    
    private void genreturnTable(){
        try
        {
            //Class.forName("com.mysql.jdbc.Driver").newInstance();
            Connection conn;
            conn = DriverManager.getConnection("jdbc:mysql://localhost/library","nigger", "nigger");
            System.out.println("Database is connected !");                                   
           
            DefaultTableModel model = (DefaultTableModel) returnTable.getModel();
            model.setRowCount(0);
            
            // the mysql insert statement
            String query = "select `bookid`,`issuedate` from `issue` where collegeid='"+authid+"'";
            Statement st4 = conn.createStatement();
            ResultSet rs = st4.executeQuery(query);
            System.out.println("Return table executed for "+authid);
            while (rs.next())
            {
                String bookid = rs.getString("bookid");
                Statement st1 = conn.createStatement();
                ResultSet nrs = st1.executeQuery("select * from `books` where `bookid`='"+bookid+"'");
                nrs.next();
                String bookname = nrs.getString("bookname");
                String bookauthor = nrs.getString("bookauthor");
                String bookpub = nrs.getString("bookpublication");                
                LocalDate issuedate = rs.getDate("issuedate").toLocalDate();
                LocalDate duedate = issuedate.plusDays(15);
                long fine = DAYS.between(duedate, LocalDate.now());                
                if(fine > 0)
                    fine *= 0.5;
                else
                    fine = 0;
                model.addRow(new Object[]{bookid, bookname, bookauthor, bookpub, issuedate, duedate, (int)fine, "Return"});                 
            }            
            ResultSet crs = conn.createStatement().executeQuery("select count(*) as `count` from `issue` where collegeid='"+authid+"'");
            crs.next();
            int count = crs.getInt("count");
            rembooksLabel.setText("Outstanding Books : "+count);
            new ButtonColumn(returnTable, returnbook, 7);                        
        }
        catch (SQLException ex) 
        {
            // handle any errors
            System.out.println("Return table errors "+authid);
            System.out.println("\tSQLException: " + ex.getMessage());
            System.out.println("\tSQLState: " + ex.getSQLState());
            System.out.println("\tVendorError: " + ex.getErrorCode());
        }
    }
    
    private void homeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMouseClicked
        // TODO add your handling code here:
        homePanel.setVisible(true);
        issuePanel.setVisible(false);
        returnPanel.setVisible(false);
        home.setBorder(BorderFactory.createLineBorder(Color.black));
        issue.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        giveback.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        genhomeTable();
    }//GEN-LAST:event_homeMouseClicked

    private void homeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMouseEntered
        // TODO add your handling code here:
        home.setOpaque(true);
        home.setBackground(new Color(41,98,255)); 
        home.setForeground(Color.WHITE);
    }//GEN-LAST:event_homeMouseEntered

    private void homeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMouseExited
        // TODO add your handling code here:
        home.setBackground(new Color(240,240,240));
        home.setForeground(Color.BLACK);
        home.setOpaque(false);
    }//GEN-LAST:event_homeMouseExited

    private void issueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issueMouseClicked
        // TODO add your handling code here:
        homePanel.setVisible(false);
        issuePanel.setVisible(true);
        returnPanel.setVisible(false);
        issue.setBorder(BorderFactory.createLineBorder(Color.black));
        home.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        giveback.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        genissueTable();
    }//GEN-LAST:event_issueMouseClicked

    private void issueMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issueMouseEntered
        // TODO add your handling code here:
        issue.setOpaque(true);
        issue.setBackground(new Color(41,98,255)); 
        issue.setForeground(Color.WHITE);
    }//GEN-LAST:event_issueMouseEntered

    private void issueMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issueMouseExited
        // TODO add your handling code here:
        issue.setBackground(new Color(240,240,240));
        issue.setForeground(Color.BLACK);
        issue.setOpaque(false);
    }//GEN-LAST:event_issueMouseExited

    private void givebackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_givebackMouseClicked
        // TODO add your handling code here:
        homePanel.setVisible(false);
        issuePanel.setVisible(false);
        returnPanel.setVisible(true);
        giveback.setBorder(BorderFactory.createLineBorder(Color.black));
        home.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        issue.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        genreturnTable();
    }//GEN-LAST:event_givebackMouseClicked

    private void givebackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_givebackMouseEntered
        // TODO add your handling code here:
        giveback.setOpaque(true);
        giveback.setBackground(new Color(41,98,255)); 
        giveback.setForeground(Color.WHITE);
    }//GEN-LAST:event_givebackMouseEntered

    private void givebackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_givebackMouseExited
        // TODO add your handling code here:
        giveback.setBackground(new Color(240,240,240));
        giveback.setForeground(Color.BLACK);
        giveback.setOpaque(false);
    }//GEN-LAST:event_givebackMouseExited

    private void signoutButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signoutButtonMouseEntered
        // TODO add your handling code here:
        signoutButton.setOpaque(true);
        signoutButton.setBackground(new Color(255,61,69)); 
        signoutButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_signoutButtonMouseEntered

    private void signoutButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signoutButtonMouseExited
        // TODO add your handling code here:
        signoutButton.setOpaque(false);
        signoutButton.setBackground(new Color(240,240,240)); 
        signoutButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_signoutButtonMouseExited

    private void signoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signoutButtonMouseClicked
        // TODO add your handling code here:
        StartPage page = new StartPage();
        page.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_signoutButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {                
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable booksTable;
    private javax.swing.JLabel giveback;
    private javax.swing.JLabel home;
    private javax.swing.JPanel homePanel;
    private javax.swing.JLabel issue;
    private javax.swing.JPanel issuePanel;
    private javax.swing.JTable issuedTable;
    private javax.swing.JLabel issuedbooksLabel;
    private javax.swing.JLabel issuedbooksLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel rembooksLabel;
    private javax.swing.JPanel returnPanel;
    private javax.swing.JTable returnTable;
    private javax.swing.JLabel signoutButton;
    private javax.swing.JLabel totalfineLabel;
    // End of variables declaration//GEN-END:variables
}
